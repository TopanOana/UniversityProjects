MATLAB BASICS:


defining variables: 
example:
>> a=3+4

a = 
	7


other stuff; 
for multiple commands without execution, finish command with ; (semicolon)

matlab works really well with matrices

matrices: 

A=[row1;row2;row3;...;]
to separate columns, use spaces!, separate rows with semicolon;

to go to previous command, use arrows, (up down)

make sure matrix has consistent rows and columns



to create a list of numbers: 

x=1:10
all numbers from 1 to 10 (use colon)

to change step:
x:10:-2:4


for float:
x=5:-0.5:2

the number in the middle is the step
the numbers on the edges are the intervals


previous matrix can be written as:

A=[1:3;4:-2;0;1:3:8;0:2]


extract a part of matrix by:
A(1:3,2:3)
this shows the first three rows and the last two columns


to extract all the columns:
A(1:3,:)


to extract element from matrix:
A(2,1) -> element from row 2 column 1




EXTENSION .m
open a script file, normal names for files
call the file in the cmd window



take input from user: 
easy command:  (self explanatory)
x = input('Enter value for x= ')
 

how to check a command:
select command and then press f1 => shows documentation
in cmd window : help + (name of command)




how to make functions: 
each function in a different script file
state the fact that it is a function:

function y=myfirstfunction(x)
y=x+1

variables in functions are local

SAVE SCRIPT FILES WITH FUNCTION WITH THE NAME OF THE FUNCTION


to return multiple variables, return a matrix: 
:


function [z t] = mysecondfunction()
x = input('Enter value for x= ');
y = input('Enter value for y= ');
z=x+y;
t=x*y;



to catch all the returned values :





